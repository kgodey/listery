version: 2.1
executors:
    base-executor:
        working_directory: ~/listery
        docker:
            - image: circleci/python:2.7.15-stretch-node-browsers
commands:
    javascript_setup:
        description: "Set up JavaScript code"
        steps:
            - checkout
            - run:
                name: update-npm
                command: 'sudo npm install -g npm@latest'
            # Download and cache dependencies
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "package.json" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            - run:
                command: npm install
            - save_cache:
                paths:
                    - node_modules
                key: v1-dependencies-{{ checksum "package.json" }}
    python_setup:
        description: "Set up Python code"
        steps:
            - checkout
            - run: sudo chown -R circleci:circleci /usr/local/bin
            - run: sudo chown -R circleci:circleci /usr/local/lib/python2.7/site-packages
            - run:
                command: sudo pip install pipenv
            - restore_cache:
                keys:
                    # when lock file changes, use increasingly general patterns to restore cache
                    - pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
                    - pip-packages-v1-{{ .Branch }}-
                    - pip-packages-v1-
            - run:
                command: pipenv install
            - run:
                command: pipenv install -r requirements_testing.txt --dev
            - save_cache:
                paths:
                    - ~/.local/share/virtualenvs/venv  # this path depends on where pipenv creates a virtualenv
                key: pip-packages-v1-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
jobs:
    javascript:
        executor: base-executor
        steps:
            - javascript_setup
            - run: mkdir -p reports
            - run:
                name: Install JUnit coverage reporter
                command: npm install jest-junit --save-dev
            - run:
                name: Run tests with JUnit as reporter
                command: npm run test -- --ci --reporters=default --reporters=jest-junit
                environment:
                    JEST_JUNIT_OUTPUT: "reports/js-test-results.xml"
            - run: ./node_modules/.bin/eslint assets/ --format junit --output-file reports/eslint.xml
            - store_test_results:
                path: reports
            - store_artifacts:
                path: reports
    python:
        executor: base-executor
        steps:
            - python_setup
            - run: mkdir -p reports
            - run:
                command: pipenv run pytest --junitxml=reports/django.xml
            - run:
                command: pipenv run pytest --pylint --pylint-rcfile=.pylintrc listery --junitxml=reports/pylint.xml
            - store_test_results:
                path: reports
            - store_artifacts:
                path: reports
workflows:
    version: 2.1
    test_in_parallel:
        jobs:
            - javascript
            - python
